openapi: 3.0.2
info:
    title: Expenses API
    version: '0.1'
    description: An API for the expenses app
    contact:
        name: VolkerWessels Telecom
        url: 'http://www.volkerwesselstelecom.com'
        email: info@vwt.digital
    license:
        name: GNU GPLv3
        url: 'https://www.gnu.org/licenses/gpl.txt'
    x-audience: company-internal
servers:
    -
        url: /
paths:
    /employee/expenses:
        get:
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExpenseDataArray'
                            examples:
                                ExpenseDataArray:
                                    value:
                                        Expenses:
                                            -
                                                amount: ''
                                                note: some text
                                            -
                                                amount: ''
                                                note: some text
                    description: Succesfull response - returns all expenses
            security:
                -
                    oAuth2:
                        - finance.read
            operationId: get_all_expenses
            summary: Get all expenses
            description: Retrieve all expenses
            x-openapi-router-controller: openapi_server.controllers.expense_controllers
        post:
            requestBody:
                $ref: '#/components/requestBodies/formData'
            responses:
                '200':
                    description: Succesfully made or updated an expense
            security:
                -
                    oAuth2:
                        - employee.write
            operationId: add_expense
            summary: Make expense
            description: Create an expense
            x-openapi-router-controller: openapi_server.controllers.expense_controllers
    '/employee/expenses/{expenses_id}/documents':
        post:
            requestBody:
                content:
                    '*/*':
                        schema:
                            $ref: '#/components/schemas/Documents'
                required: true
            parameters:
                -
                    $ref: '#/components/parameters/expensesId'
            responses:
                '200':
                    description: Make new document
            security:
                -
                    oAuth2:
                        - finance.write
                        - employee.write
            operationId: add_document
            summary: Make new document
            description: Add a document to an expense
            x-openapi-router-controller: openapi_server.controllers.expense_controllers
    '/employee/expenses/{expenses_id}':
        get:
            parameters:
                -
                    $ref: '#/components/parameters/expensesId'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExpenseData'
                    description: Successful response - returns information of expense
            security:
                -
                    oAuth2:
                        - finance.read
                        - employee.read
            operationId: get_expenses
            summary: Get information from expenses by id
            description: Retrieve an expense
            x-openapi-router-controller: openapi_server.controllers.expense_controllers
    '/employee/expenses/{expenses_id}/documents/{documents_id}':
        get:
            parameters:
                -
                    $ref: '#/components/parameters/expensesId'
                -
                    $ref: '#/components/parameters/documentId'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Documents'
                    description: Succesfull response - returns document
            security:
                -
                    oAuth2:
                        - finance.read
                        - employee.read
            operationId: get_document_by_id
            summary: Get document by document id
            x-openapi-router-controller: openapi_server.controllers.expense_controllers
        put:
            parameters:
                -
                    $ref: '#/components/parameters/expensesId'
                -
                    $ref: '#/components/parameters/documentId'
            responses:
                '200':
                    description: Succesfully updated a document
            security:
                -
                    oAuth2:
                        - finance.write
                        - employee.write
            operationId: update_attachments_by_id
            summary: Update document by document id
            x-openapi-router-controller: openapi_server.controllers.expense_controllers
        delete:
            parameters:
                -
                    $ref: '#/components/parameters/expensesId'
                -
                    $ref: '#/components/parameters/documentId'
            responses:
                '200':
                    description: Succesfully deleted a document
            security:
                -
                    oAuth2:
                        - finance.write
                        - employee.write
            operationId: delete_attachments_by_id
            summary: Delete an document by document id
            x-openapi-router-controller: openapi_server.controllers.expense_controllers
components:
    schemas:
        Documents:
            description: Information for documents
            properties:
                document:
                    format: binary
                    type: string
            example:
                document: ''
        ExpenseData:
            title: expenseData
            description: Form data to an expense
            required:
                - amount
                - note
            type: object
            properties:
                amount:
                    format: decimal
                    type: number
                note:
                    type: string
            example: |-
                {
                    "note": "This is a note\n",
                    "id": "R1rt2345\n",
                    "amount": 45.56,
                    "status": "new",
                }
        ExpenseDataArray:
            title: Root Type for ExpenseDataArray
            description: Array of expense data
            type: object
            properties:
                Expenses:
                    type: array
                    items:
                        $ref: '#/components/schemas/ExpenseData'
            example:
                Expenses:
                    -
                        note: |
                            This is a note
                        id: |
                            R1rt2345
                        amount: 45.56
                        status: new
                    -
                        note: |
                            This is a notes
                        id: |
                            R1rt23f45
                        amount: 45.16
                        status: opened
    parameters:
        expensesId:
            style: simple
            explode: false
            name: expenses_id
            schema:
                type: integer
            in: path
            required: true
        documentId:
            style: simple
            explode: false
            name: documents_id
            schema:
                type: integer
            in: path
            required: true
    requestBodies:
        formData:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ExpenseData'
            required: true
    securitySchemes:
        oAuth2:
            flows:
                clientCredentials:
                    tokenUrl: 'https://api.example.com/oauth2/authorize'
                    scopes:
                        finance.read: Read all expenses and documents
                        finance.write: Write all expenses and documents
                        employee.read: Read expense and document information
                        employee.write: Write expenses and documents
            type: oauth2
            description: This API uses OAuth 2 with the implicit grant flow.
            x-tokenInfoFunc: openapi_server.controllers.security_controller_.info_from_oAuth2
            x-scopeValidateFunc: openapi_server.controllers.security_controller_.validate_scope_oAuth2
