# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class FormData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount=None, cost_type=None, date_of_transaction=None, note=None):  # noqa: E501
        """FormData - a model defined in OpenAPI

        :param amount: The amount of this FormData.  # noqa: E501
        :type amount: float
        :param cost_type: The cost_type of this FormData.  # noqa: E501
        :cost_type type: str
        :param note: The note of this FormData.  # noqa: E501
        :type note: str
        """
        self.openapi_types = {
            'amount': float,
            'cost_type': str,
            'note': str,
            'date_of_transaction': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'cost_type': 'cost_type',
            'note': 'note',
            'date_of_transaction': 'date_of_transaction'
        }

        self._amount = amount
        self._type = cost_type
        self._note = note
        self._date_of_transaction = date_of_transaction

    @classmethod
    def from_dict(cls, dikt) -> 'FormData':
        """Returns the dict as a model

        :param dikt: A dict.
        :cost_type: dict
        :return: The formData of this FormData.  # noqa: E501
        :rtype: FormData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this FormData.


        :return: The amount of this FormData.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this FormData.


        :param amount: The amount of this FormData.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def cost_type(self):
        """Gets the cost_type of this FormData.


        :return: The cost_type of this FormData.
        :rtype: str
        """
        return self._cost_type

    @cost_type.setter
    def cost_type(self, cost_type):
        """Sets the cost_type of this FormData.


        :param cost_type: The cost_type of this FormData.
        :type cost_type: str
        """
        if cost_type is None:
            raise ValueError("Invalid value for `cost_type`, must not be `None`")  # noqa: E501

        self._cost_type = cost_type

    @property
    def note(self):
        """Gets the note of this FormData.


        :return: The note of this FormData.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this FormData.


        :param note: The note of this FormData.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501

        self._note = note

    @property
    def date_of_transaction(self):
        """
        Gets the date_of_transaction of this FormData
        :return:
        """
        return self._date_of_transaction

    @date_of_transaction.setter
    def date_of_transaction(self, date_of_transaction):
        """
        Sets date_of_transaction of this FormData
        :param date_of_transaction:
        :return:
        """
        if date_of_transaction is None:
            raise ValueError("Invalid value for `date_of_transaction`, must not be `None`")
