# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Expenses(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, amount=None, note=None, picture=None):  # noqa: E501
        """Expenses - a model defined in OpenAPI

        :param id: The id of this Expenses.  # noqa: E501
        :type id: str
        :param amount: The amount of this Expenses.  # noqa: E501
        :type amount: float
        :param note: The note of this Expenses.  # noqa: E501
        :type note: str
        :param picture: The picture of this Expenses.  # noqa: E501
        :type picture: file
        """
        self.openapi_types = {
            'id': str,
            'amount': float,
            'note': str,
            'picture': file
        }

        self.attribute_map = {
            'id': 'id',
            'amount': 'amount',
            'note': 'note',
            'picture': 'picture'
        }

        self._id = id
        self._amount = amount
        self._note = note
        self._picture = picture

    @classmethod
    def from_dict(cls, dikt) -> 'Expenses':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Expenses of this Expenses.  # noqa: E501
        :rtype: Expenses
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Expenses.


        :return: The id of this Expenses.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Expenses.


        :param id: The id of this Expenses.
        :type id: str
        """

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this Expenses.


        :return: The amount of this Expenses.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Expenses.


        :param amount: The amount of this Expenses.
        :type amount: float
        """

        self._amount = amount

    @property
    def note(self):
        """Gets the note of this Expenses.


        :return: The note of this Expenses.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Expenses.


        :param note: The note of this Expenses.
        :type note: str
        """

        self._note = note

    @property
    def picture(self):
        """Gets the picture of this Expenses.


        :return: The picture of this Expenses.
        :rtype: file
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this Expenses.


        :param picture: The picture of this Expenses.
        :type picture: file
        """

        self._picture = picture
