# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ExpenseSingle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount=None, claim_date=None, cost_type=None, employee=None, flags=None, id=None, note=None, status=None, transaction_date=None):  # noqa: E501
        """ExpenseSingle - a model defined in OpenAPI

        :param amount: The amount of this ExpenseSingle.  # noqa: E501
        :type amount: float
        :param claim_date: The claim_date of this ExpenseSingle.  # noqa: E501
        :type claim_date: datetime
        :param cost_type: The cost_type of this ExpenseSingle.  # noqa: E501
        :type cost_type: str
        :param employee: The employee of this ExpenseSingle.  # noqa: E501
        :type employee: str
        :param flags: The flags of this ExpenseSingle.  # noqa: E501
        :type flags: object
        :param id: The id of this ExpenseSingle.  # noqa: E501
        :type id: int
        :param note: The note of this ExpenseSingle.  # noqa: E501
        :type note: str
        :param status: The status of this ExpenseSingle.  # noqa: E501
        :type status: object
        :param transaction_date: The transaction_date of this ExpenseSingle.  # noqa: E501
        :type transaction_date: datetime
        """
        self.openapi_types = {
            'amount': float,
            'claim_date': datetime,
            'cost_type': str,
            'employee': str,
            'flags': object,
            'id': int,
            'note': str,
            'status': object,
            'transaction_date': datetime
        }

        self.attribute_map = {
            'amount': 'amount',
            'claim_date': 'claim_date',
            'cost_type': 'cost_type',
            'employee': 'employee',
            'flags': 'flags',
            'id': 'id',
            'note': 'note',
            'status': 'status',
            'transaction_date': 'transaction_date'
        }

        self._amount = amount
        self._claim_date = claim_date
        self._cost_type = cost_type
        self._employee = employee
        self._flags = flags
        self._id = id
        self._note = note
        self._status = status
        self._transaction_date = transaction_date

    @classmethod
    def from_dict(cls, dikt) -> 'ExpenseSingle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExpenseSingle of this ExpenseSingle.  # noqa: E501
        :rtype: ExpenseSingle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ExpenseSingle.


        :return: The amount of this ExpenseSingle.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ExpenseSingle.


        :param amount: The amount of this ExpenseSingle.
        :type amount: float
        """
        if amount is not None and amount < 0.01:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0.01`")  # noqa: E501

        self._amount = amount

    @property
    def claim_date(self):
        """Gets the claim_date of this ExpenseSingle.


        :return: The claim_date of this ExpenseSingle.
        :rtype: datetime
        """
        return self._claim_date

    @claim_date.setter
    def claim_date(self, claim_date):
        """Sets the claim_date of this ExpenseSingle.


        :param claim_date: The claim_date of this ExpenseSingle.
        :type claim_date: datetime
        """

        self._claim_date = claim_date

    @property
    def cost_type(self):
        """Gets the cost_type of this ExpenseSingle.


        :return: The cost_type of this ExpenseSingle.
        :rtype: str
        """
        return self._cost_type

    @cost_type.setter
    def cost_type(self, cost_type):
        """Sets the cost_type of this ExpenseSingle.


        :param cost_type: The cost_type of this ExpenseSingle.
        :type cost_type: str
        """

        self._cost_type = cost_type

    @property
    def employee(self):
        """Gets the employee of this ExpenseSingle.


        :return: The employee of this ExpenseSingle.
        :rtype: str
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this ExpenseSingle.


        :param employee: The employee of this ExpenseSingle.
        :type employee: str
        """

        self._employee = employee

    @property
    def flags(self):
        """Gets the flags of this ExpenseSingle.


        :return: The flags of this ExpenseSingle.
        :rtype: object
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this ExpenseSingle.


        :param flags: The flags of this ExpenseSingle.
        :type flags: object
        """

        self._flags = flags

    @property
    def id(self):
        """Gets the id of this ExpenseSingle.


        :return: The id of this ExpenseSingle.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExpenseSingle.


        :param id: The id of this ExpenseSingle.
        :type id: int
        """
        if id is not None and id > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def note(self):
        """Gets the note of this ExpenseSingle.


        :return: The note of this ExpenseSingle.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ExpenseSingle.


        :param note: The note of this ExpenseSingle.
        :type note: str
        """

        self._note = note

    @property
    def status(self):
        """Gets the status of this ExpenseSingle.


        :return: The status of this ExpenseSingle.
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExpenseSingle.


        :param status: The status of this ExpenseSingle.
        :type status: object
        """

        self._status = status

    @property
    def transaction_date(self):
        """Gets the transaction_date of this ExpenseSingle.


        :return: The transaction_date of this ExpenseSingle.
        :rtype: datetime
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this ExpenseSingle.


        :param transaction_date: The transaction_date of this ExpenseSingle.
        :type transaction_date: datetime
        """

        self._transaction_date = transaction_date
