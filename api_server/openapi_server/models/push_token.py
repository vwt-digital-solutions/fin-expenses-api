# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class PushToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, push_token=None, app_version=None, os_platform=None, os_version=None):  # noqa: E501
        """PushToken - a model defined in OpenAPI

        :param push_token: The push_token of this PushToken.  # noqa: E501
        :type push_token: str
        :param app_version: The app_version of this PushToken.  # noqa: E501
        :type app_version: str
        :param os_platform: The os_platform of this PushToken.  # noqa: E501
        :type os_platform: str
        :param os_version: The os_version of this PushToken.  # noqa: E501
        :type os_version: str
        """
        self.openapi_types = {
            'push_token': str,
            'app_version': str,
            'os_platform': str,
            'os_version': str
        }

        self.attribute_map = {
            'push_token': 'push_token',
            'app_version': 'app_version',
            'os_platform': 'os_platform',
            'os_version': 'os_version'
        }

        self._push_token = push_token
        self._app_version = app_version
        self._os_platform = os_platform
        self._os_version = os_version

    @classmethod
    def from_dict(cls, dikt) -> 'PushToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PushToken of this PushToken.  # noqa: E501
        :rtype: PushToken
        """
        return util.deserialize_model(dikt, cls)

    @property
    def push_token(self):
        """Gets the push_token of this PushToken.


        :return: The push_token of this PushToken.
        :rtype: str
        """
        return self._push_token

    @push_token.setter
    def push_token(self, push_token):
        """Sets the push_token of this PushToken.


        :param push_token: The push_token of this PushToken.
        :type push_token: str
        """
        if push_token is None:
            raise ValueError("Invalid value for `push_token`, must not be `None`")  # noqa: E501

        self._push_token = push_token

    @property
    def app_version(self):
        """Gets the app_version of this PushToken.


        :return: The app_version of this PushToken.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this PushToken.


        :param app_version: The app_version of this PushToken.
        :type app_version: str
        """
        if app_version is None:
            raise ValueError("Invalid value for `app_version`, must not be `None`")  # noqa: E501

        self._app_version = app_version

    @property
    def os_platform(self):
        """Gets the os_platform of this PushToken.


        :return: The os_platform of this PushToken.
        :rtype: str
        """
        return self._os_platform

    @os_platform.setter
    def os_platform(self, os_platform):
        """Sets the os_platform of this PushToken.


        :param os_platform: The os_platform of this PushToken.
        :type os_platform: str
        """
        if os_platform is None:
            raise ValueError("Invalid value for `os_platform`, must not be `None`")  # noqa: E501

        self._os_platform = os_platform

    @property
    def os_version(self):
        """Gets the os_version of this PushToken.


        :return: The os_version of this PushToken.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this PushToken.


        :param os_version: The os_version of this PushToken.
        :type os_version: str
        """
        if os_version is None:
            raise ValueError("Invalid value for `os_version`, must not be `None`")  # noqa: E501

        self._os_version = os_version
