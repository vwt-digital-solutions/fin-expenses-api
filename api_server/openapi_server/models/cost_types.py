# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CostTypes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cid=None, ctype=None, managertype=None, message=None):  # noqa: E501
        """CostTypes - a model defined in OpenAPI

        :param cid: The cid of this CostTypes.  # noqa: E501
        :type cid: str
        :param ctype: The ctype of this CostTypes.  # noqa: E501
        :type ctype: str
        :param managertype: The managertype of this CostTypes.  # noqa: E501
        :type managertype: str
        :param message: The message of this CostTypes.  # noqa: E501
        :type message: object
        """
        self.openapi_types = {
            'cid': str,
            'ctype': str,
            'managertype': str,
            'message': object
        }

        self.attribute_map = {
            'cid': 'cid',
            'ctype': 'ctype',
            'managertype': 'managertype',
            'message': 'message'
        }

        self._cid = cid
        self._ctype = ctype
        self._managertype = managertype
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'CostTypes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CostTypes of this CostTypes.  # noqa: E501
        :rtype: CostTypes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self):
        """Gets the cid of this CostTypes.

        A cost type doel organisation code  # noqa: E501

        :return: The cid of this CostTypes.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this CostTypes.

        A cost type doel organisation code  # noqa: E501

        :param cid: The cid of this CostTypes.
        :type cid: str
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")  # noqa: E501

        self._cid = cid

    @property
    def ctype(self):
        """Gets the ctype of this CostTypes.


        :return: The ctype of this CostTypes.
        :rtype: str
        """
        return self._ctype

    @ctype.setter
    def ctype(self, ctype):
        """Sets the ctype of this CostTypes.


        :param ctype: The ctype of this CostTypes.
        :type ctype: str
        """
        if ctype is None:
            raise ValueError("Invalid value for `ctype`, must not be `None`")  # noqa: E501

        self._ctype = ctype

    @property
    def managertype(self):
        """Gets the managertype of this CostTypes.

        A manager type to differentiate different lines of managers   # noqa: E501

        :return: The managertype of this CostTypes.
        :rtype: str
        """
        return self._managertype

    @managertype.setter
    def managertype(self, managertype):
        """Sets the managertype of this CostTypes.

        A manager type to differentiate different lines of managers   # noqa: E501

        :param managertype: The managertype of this CostTypes.
        :type managertype: str
        """

        self._managertype = managertype

    @property
    def message(self):
        """Gets the message of this CostTypes.

        Different messages for different languages  # noqa: E501

        :return: The message of this CostTypes.
        :rtype: object
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CostTypes.

        Different messages for different languages  # noqa: E501

        :param message: The message of this CostTypes.
        :type message: object
        """

        self._message = message
