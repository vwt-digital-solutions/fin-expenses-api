# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, creditor_note=None, manager_note=None):  # noqa: E501
        """Status - a model defined in OpenAPI

        :param status: The status of this Status.  # noqa: E501
        :type status: str
        :param creditor_note: The creditor_note of this Status.  # noqa: E501
        :type creditor_note: str
        :param manager_note: The manager_note of this Status.  # noqa: E501
        :type manager_note: str
        """
        self.openapi_types = {
            'status': str,
            'creditor_note': str,
            'manager_note': str
        }

        self.attribute_map = {
            'status': 'status',
            'creditor_note': 'creditor_note',
            'manager_note': 'manager_note'
        }

        self._status = status
        self._creditor_note = creditor_note
        self._manager_note = manager_note

    @classmethod
    def from_dict(cls, dikt) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Status of this Status.  # noqa: E501
        :rtype: Status
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this Status.


        :return: The status of this Status.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Status.


        :param status: The status of this Status.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def creditor_note(self):
        """Gets the creditor_note of this Status.


        :return: The creditor_note of this Status.
        :rtype: str
        """
        return self._creditor_note

    @creditor_note.setter
    def creditor_note(self, creditor_note):
        """Sets the creditor_note of this Status.


        :param creditor_note: The creditor_note of this Status.
        :type creditor_note: str
        """

        self._creditor_note = creditor_note

    @property
    def manager_note(self):
        """Gets the manager_note of this Status.


        :return: The manager_note of this Status.
        :rtype: str
        """
        return self._manager_note

    @manager_note.setter
    def manager_note(self, manager_note):
        """Sets the manager_note of this Status.


        :param manager_note: The manager_note of this Status.
        :type manager_note: str
        """

        self._manager_note = manager_note
